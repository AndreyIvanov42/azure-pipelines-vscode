# CI and PR build script
#
# There should be no deep magic here. The developer experience and CI experience
# must remain as close to one another as possible.
#
# Developer experience:
#   npm install
#   (make changes)
#   npm test
#   vsce package
#   (give VSIX to someone for buddy testing)
trigger:
- master
- releases/*

steps:
# Set version number for PR/CI or release
- ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/') }}:
  - template: version-release.yml
- ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/heads/releases/')) }}:
  - template: version-ci.yml

- script: npm install
  displayName: npm install

- script: npm run compile
  displayName: Build extension

- script: |
    BEFORE=$(git hash-object local-schema.json)
    npm run generateyamlschema
    AFTER=$(git hash-object local-schema.json)
    if [ "$BEFORE" != "$AFTER" ]; then
      echo Generated local-schema.json does not match the one checked in.
      echo Did you forget to regen and check in the result?
      echo SHA1 hash before: $BEFORE
      echo SHA1 hash after : $AFTER
      exit -1
    fi
  displayName: Regenerate local-schema.json

- script: npm run unittest
  displayName: Run unit tests

# Acquire the `vsce` tool and use it to package
- script: |
    sudo npm install -g vsce
    vsce package
  displayName: Create VSIX

- script: |
    npm run vscode:prepublish
    cat /home/vsts/.npm/_logs/*.log
  displayName: Echo npm error logs on failure
  condition: failed()

# This is how the CI system knows what to publish...
- task: CopyFiles@2
  displayName: Stage VSIX for publishing
  inputs:
    contents: '*.vsix' 
    targetFolder: $(Build.ArtifactStagingDirectory)

# ...and this is the CI system publishing it.
- task: PublishBuildArtifacts@1
  displayName: Publish VSIX
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)
    artifactName: azure-pipelines-vscode
