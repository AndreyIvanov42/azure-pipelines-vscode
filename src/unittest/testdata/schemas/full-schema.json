{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://github.com/Microsoft/vsts-agent/blob/master/src/Misc/ci-schema.json",
  "$comment": "v1.140.1",
  "title": "Pipeline schema",
  "description": "A pipeline definition",
  "$ref": "#/definitions/pipeline",
  "definitions": {
    "pipeline": {
      "type": "object",
      "anyOf": [
        {
          "$ref": "#/definitions/jobsAtRoot"
        },
        {
          "$ref": "#/definitions/phasesAtRoot"
        },
        {
          "$ref": "#/definitions/jobAtRoot"
        },
        {
          "$ref": "#/definitions/phaseAtRoot"
        }
      ]
    },
    "stagesAtRoot": {
      "additionalProperties": false,
      "properties": {
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/stage"
          }
        },
        "variables": {
          "oneOf": [
            {
              "type": "object"
            },
            {
              "type": "array",
              "items": {
                "type": "object",
                "oneOf": [
                  {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "properties": {
                      "group": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            }
          ],
          "description": "Variables for the entire pipeline"
        },
        "name": {
          "description": "Pipeline name",
          "type": "string"
        },
        "trigger": {
          "description": "Continuous integration triggers",
          "$ref": "#/definitions/trigger"
        },
        "resources": {
          "description": "Containers and repositories used in the build",
          "$ref": "#/definitions/resources"
        }
      }
    },
    "jobsAtRoot": {
      "additionalProperties": false,
      "required": [
        "jobs"
      ],
      "properties": {
        "jobs": {
          "description": "Jobs which make up the pipeline",
          "type": "array",
          "items": {
            "$ref": "#/definitions/job"
          }
        },
        "variables": {
          "oneOf": [
            {
              "type": "object"
            },
            {
              "type": "array",
              "items": {
                "type": "object",
                "oneOf": [
                  {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "properties": {
                      "group": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            }
          ],
          "description": "Variables for this multi-job pipeline"
        },
        "name": {
          "description": "Pipeline name",
          "type": "string"
        },
        "trigger": {
          "description": "Continuous integration triggers",
          "$ref": "#/definitions/trigger"
        },
        "resources": {
          "description": "Containers and repositories used in the build",
          "$ref": "#/definitions/resources"
        }
      }
    },
    "phasesAtRoot": {
      "additionalProperties": false,
      "required": [
        "phases"
      ],
      "properties": {
        "phases": {
          "description": "[DEPRECATED] Use `jobs` instead.\n\nPhases which make up the pipeline",
          "type": "array",
          "items": {
            "$ref": "#/definitions/phase"
          }
        },
        "variables": {
          "oneOf": [
            {
              "type": "object"
            },
            {
              "type": "array",
              "items": {
                "type": "object",
                "oneOf": [
                  {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "properties": {
                      "group": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            }
          ],
          "description": "Variables for this multi-phase pipeline"
        },
        "name": {
          "description": "Pipeline name",
          "type": "string"
        },
        "trigger": {
          "description": "Continuous integration triggers",
          "$ref": "#/definitions/trigger"
        },
        "resources": {
          "description": "Containers and repositories used in the build",
          "$ref": "#/definitions/resources"
        }
      }
    },
    "jobAtRoot": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "job": {
          "oneOf": [
            {
              "type": "string",
              "description": "ID of the job",
              "pattern": "^[_A-Za-z0-9]*$"
            },
            {
              "type": "integer",
              "description": "ID of the job"
            },
            {
              "type": "null"
            }
          ]
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable name of the job"
        },
        "dependsOn": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "uniqueItems": true
              }
            }
          ],
          "description": "Any jobs which must complete before this one"
        },
        "condition": {
          "type": "string",
          "description": "Evaluate this condition expression to determine whether to run this job"
        },
        "continueOnError": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Continue running this job even on failure?"
        },
        "pool": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/pool"
            }
          ],
          "description": "Pool where this job will run"
        },
        "server": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "True if this is an agent-less job (runs on server)"
        },
        "strategy": {
          "$ref": "#/definitions/strategy",
          "description": "Execution strategy for this job"
        },
        "variables": {
          "oneOf": [
            {
              "type": "object"
            },
            {
              "type": "array",
              "items": {
                "type": "object",
                "oneOf": [
                  {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "properties": {
                      "group": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            }
          ],
          "description": "Job-specific variables"
        },
        "steps": {
          "type": "array",
          "description": "A list of steps to run in this job",
          "items": {
            "$ref": "#/definitions/stepOrTemplateExpression"
          }
        },
        "template": {
          "type": "string",
          "description": "Reference to a template for this job"
        },
        "parameters": {
          "description": "Parameters used in a pipeline template",
          "type": "object"
        },
        "timeoutInMinutes": {
          "$ref": "#/definitions/integerMacroRuntimeExpression",
          "description": "Time to wait before cancelling the job"
        },
        "cancelTimeoutInMinutes": {
          "$ref": "#/definitions/integerMacroRuntimeExpression",
          "description": "Time to wait for the job to cancel before forcibly terminating it"
        },
        "container": {
          "type": "string",
          "description": "Container resource name"
        },
        "workspace": {
          "$ref": "#/definitions/workspace"
        },
        "name": {
          "description": "Pipeline name",
          "type": "string"
        },
        "trigger": {
          "description": "Continuous integration triggers",
          "$ref": "#/definitions/trigger"
        },
        "resources": {
          "description": "Containers and repositories used in the build",
          "$ref": "#/definitions/resources"
        }
      }
    },
    "phaseAtRoot": {
      "type": "object",
      "additionalProperties": false,
      "description": "[DEPRECATED] Use `job` (inside `jobs`) instead",
      "properties": {
        "phase": {
          "oneOf": [
            {
              "type": "string",
              "description": "ID of the phase",
              "pattern": "^[_A-Za-z0-9]*$"
            },
            {
              "type": "null"
            }
          ]
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable name of the phase"
        },
        "dependsOn": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "uniqueItems": true
              }
            }
          ],
          "description": "Any phases which must complete before this one"
        },
        "condition": {
          "type": "string",
          "description": "Evaluate this condition expression to determine whether to run this phase"
        },
        "continueOnError": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Continue running this phase even on failure?"
        },
        "queue": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/queue"
            }
          ],
          "description": "Queue where this phase will run"
        },
        "server": {
          "oneOf": [
            {
              "$ref": "#/definitions/booleanMacroRuntimeExpression"
            },
            {
              "$ref": "#/definitions/legacyServer"
            }
          ],
          "description": "True if this is an agent-less phase (runs on server)"
        },
        "matrix": {
          "$ref": "#/definitions/matrix",
          "description": "Matrix strategy for this phase"
        },
        "variables": {
          "oneOf": [
            {
              "type": "object"
            },
            {
              "type": "array",
              "items": {
                "type": "object",
                "oneOf": [
                  {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "properties": {
                      "group": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            }
          ],
          "description": "Phase-specific variables"
        },
        "steps": {
          "type": "array",
          "description": "A list of steps to run in this phase",
          "items": {
            "$ref": "#/definitions/stepOrTemplateExpression"
          }
        },
        "template": {
          "type": "string",
          "description": "Reference to a template for this phase"
        },
        "parameters": {
          "description": "Parameters used in a pipeline template",
          "type": "object"
        },
        "name": {
          "description": "Pipeline name",
          "type": "string"
        },
        "trigger": {
          "description": "Continuous integration triggers",
          "$ref": "#/definitions/trigger"
        },
        "resources": {
          "description": "Containers and repositories used in the build",
          "$ref": "#/definitions/resources"
        }
      }
    },
    "stage": {
      "type": "object",
      "additionalProperties": false
    },
    "job": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "job": {
          "oneOf": [
            {
              "type": "string",
              "description": "ID of the job",
              "pattern": "^[_A-Za-z0-9]*$"
            },
            {
              "type": "integer",
              "description": "ID of the job"
            },
            {
              "type": "null"
            }
          ]
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable name of the job"
        },
        "dependsOn": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "uniqueItems": true
              }
            }
          ],
          "description": "Any jobs which must complete before this one"
        },
        "condition": {
          "type": "string",
          "description": "Evaluate this condition expression to determine whether to run this job"
        },
        "continueOnError": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Continue running this job even on failure?"
        },
        "pool": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/pool"
            }
          ],
          "description": "Pool where this job will run"
        },
        "server": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "True if this is an agent-less job (runs on server)"
        },
        "strategy": {
          "$ref": "#/definitions/strategy",
          "description": "Execution strategy for this job"
        },
        "variables": {
          "oneOf": [
            {
              "type": "object"
            },
            {
              "type": "array",
              "items": {
                "type": "object",
                "oneOf": [
                  {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "properties": {
                      "group": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            }
          ],
          "description": "Job-specific variables"
        },
        "steps": {
          "type": "array",
          "description": "A list of steps to run in this job",
          "items": {
            "$ref": "#/definitions/stepOrTemplateExpression"
          }
        },
        "template": {
          "type": "string",
          "description": "Reference to a template for this job"
        },
        "parameters": {
          "description": "Parameters used in a pipeline template",
          "type": "object"
        },
        "timeoutInMinutes": {
          "$ref": "#/definitions/integerMacroRuntimeExpression",
          "description": "Time to wait before cancelling the job"
        },
        "cancelTimeoutInMinutes": {
          "$ref": "#/definitions/integerMacroRuntimeExpression",
          "description": "Time to wait for the job to cancel before forcibly terminating it"
        },
        "container": {
          "type": "string",
          "description": "Container resource name"
        },
        "workspace": {
          "$ref": "#/definitions/workspace"
        }
      }
    },
    "phase": {
      "type": "object",
      "additionalProperties": false,
      "description": "[DEPRECATED] Use `job` (inside `jobs`) instead",
      "properties": {
        "phase": {
          "oneOf": [
            {
              "type": "string",
              "description": "ID of the phase",
              "pattern": "^[_A-Za-z0-9]*$"
            },
            {
              "type": "null"
            }
          ]
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable name of the phase"
        },
        "dependsOn": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "uniqueItems": true
              }
            }
          ],
          "description": "Any phases which must complete before this one"
        },
        "condition": {
          "type": "string",
          "description": "Evaluate this condition expression to determine whether to run this phase"
        },
        "continueOnError": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Continue running this phase even on failure?"
        },
        "queue": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "#/definitions/queue"
            }
          ],
          "description": "Queue where this phase will run"
        },
        "server": {
          "oneOf": [
            {
              "$ref": "#/definitions/booleanMacroRuntimeExpression"
            },
            {
              "$ref": "#/definitions/legacyServer"
            }
          ],
          "description": "True if this is an agent-less phase (runs on server)"
        },
        "matrix": {
          "$ref": "#/definitions/matrix",
          "description": "Matrix strategy for this phase"
        },
        "variables": {
          "oneOf": [
            {
              "type": "object"
            },
            {
              "type": "array",
              "items": {
                "type": "object",
                "oneOf": [
                  {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  {
                    "properties": {
                      "group": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            }
          ],
          "description": "Phase-specific variables"
        },
        "steps": {
          "type": "array",
          "description": "A list of steps to run in this phase",
          "items": {
            "$ref": "#/definitions/stepOrTemplateExpression"
          }
        },
        "template": {
          "type": "string",
          "description": "Reference to a template for this phase"
        },
        "parameters": {
          "description": "Parameters used in a pipeline template",
          "type": "object"
        }
      }
    },
    "resources": {
      "oneOf": [
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "containers": {
              "description": "List of container images",
              "type": "array",
              "items": {
                "$ref": "#/definitions/containerReference"
              }
            },
            "repositories": {
              "description": "List of external repositories",
              "type": "array",
              "items": {
                "$ref": "#/definitions/repositoryReference"
              }
            }
          }
        },
        {
          "type": "array",
          "description": "[DEPRECATED] Use `repositories` or `checkout` instead.\n\nRepository options"
        }
      ]
    },
    "pool": {
      "type": "object",
      "description": "Pool details",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of a pool"
        },
        "vmImage": {
          "type": "string",
          "description": "For the Azure Pipelines pool, the name of the VM image to use"
        },
        "demands": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "List of demands (for a private pool)"
        }
      }
    },
    "queue": {
      "type": "object",
      "description": "[DEPRECATED] Use `pool` (with `jobs`) instead.\n\nQueue details",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of a queue"
        },
        "demands": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "List of demands (for a private queue)"
        },
        "timeoutInMinutes": {
          "$ref": "#/definitions/integerMacroRuntimeExpression",
          "description": "Time to wait before cancelling the phase"
        },
        "cancelTimeoutInMinutes": {
          "$ref": "#/definitions/integerMacroRuntimeExpression",
          "description": "Time to wait for the phase to cancel before forcibly terminating it"
        },
        "parallel": {
          "$ref": "#/definitions/integerMacroRuntimeExpression",
          "description": "Maximum number of parallel agent executions"
        },
        "matrix": {
          "$ref": "#/definitions/matrix"
        },
        "container": {
          "type": "string",
          "description": "Container resource name"
        },
        "workspace": {
          "$ref": "#/definitions/workspace"
        }
      }
    },
    "strategy": {
      "type": "object",
      "anyOf": [
        {
          "properties": {
            "matrix": {
              "$ref": "#/definitions/matrix"
            },
            "maxParallel": {
              "$ref": "#/definitions/integerMacroRuntimeExpression",
              "description": "Maximum number of jobs running in parallel"
            }
          },
          "additionalProperties": false
        },
        {
          "properties": {
            "parallel": {
              "$ref": "#/definitions/integerMacroRuntimeExpression",
              "description": "Run the job this many times"
            },
            "maxParallel": {
              "$ref": "#/definitions/integerMacroRuntimeExpression",
              "description": "Maximum number of jobs running in parallel"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "workspace": {
      "description": "Workspace settings",
      "type": "object",
      "properties": {
        "clean": {
          "type": "string",
          "description": "Clean source?"
        }
      }
    },
    "legacyServer": {
      "type": "object",
      "description": "Server job details",
      "additionalProperties": false,
      "properties": {
        "timeoutInMinutes": {
          "$ref": "#/definitions/integerMacroRuntimeExpression",
          "description": "Time to wait before cancelling the job"
        },
        "cancelTimeoutInMinutes": {
          "$ref": "#/definitions/integerMacroRuntimeExpression",
          "description": "Time to wait for the job to cancel before forcibly terminating it"
        },
        "parallel": {
          "$ref": "#/definitions/integerMacroRuntimeExpression",
          "description": "Maximum number of parallel agent executions"
        },
        "matrix": {
          "$ref": "#/definitions/matrix"
        }
      }
    },
    "matrix": {
      "description": "List of permutations of variable values to run",
      "oneOf": [
        {
          "type": "object",
          "minProperties": 1,
          "patternProperties": {
            "^[A-Za-z0-9_]+$": {
              "type": "object",
              "description": "Variable-value pair to pass in this matrix instance"
            }
          }
        },
        {
          "$ref": "#/definitions/runtimeExpression"
        }
      ]
    },
    "script": {
      "type": "object",
      "description": "An inline script step",
      "additionalProperties": false,
      "required": [
        "script"
      ],
      "properties": {
        "script": {
          "type": "string",
          "description": "An inline script"
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable name for the step"
        },
        "name": {
          "type": "string",
          "description": "ID of the step",
          "pattern": "^[_A-Za-z0-9]*$"
        },
        "failOnStderr": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Fail the task if output is sent to Stderr?"
        },
        "workingDirectory": {
          "type": "string",
          "description": "Start the script with this working directory"
        },
        "condition": {
          "type": "string",
          "description": "Evaluate this condition expression to determine whether to run this script"
        },
        "continueOnError": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Continue running the parent job even on failure?"
        },
        "enabled": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Run this script when the job runs?"
        },
        "timeoutInMinutes": {
          "$ref": "#/definitions/integerMacroExpression",
          "description": "Time to wait for this script to complete before the server kills it"
        },
        "env": {
          "type": "object",
          "description": "Variables to map into the process's environment"
        }
      }
    },
    "bash": {
      "type": "object",
      "required": [
        "bash"
      ],
      "additionalProperties": false,
      "properties": {
        "bash": {
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable name for the step"
        },
        "name": {
          "type": "string",
          "description": "ID of the step",
          "pattern": "^[_A-Za-z0-9]*$"
        },
        "failOnStderr": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Fail the task if output is sent to Stderr?"
        },
        "workingDirectory": {
          "type": "string",
          "description": "Start the script with this working directory"
        },
        "condition": {
          "type": "string",
          "description": "Evaluate this condition expression to determine whether to run this script"
        },
        "continueOnError": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Continue running the parent job even on failure?"
        },
        "enabled": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Run this script when the job runs?"
        },
        "timeoutInMinutes": {
          "$ref": "#/definitions/integerMacroExpression",
          "description": "Time to wait for this script to complete before the server kills it"
        },
        "env": {
          "type": "object",
          "description": "Variables to map into the process's environment"
        }
      }
    },
    "powershell": {
      "type": "object",
      "required": [
        "powershell"
      ],
      "additionalProperties": false,
      "properties": {
        "powershell": {
          "type": "string",
          "description": "Inline PowerShell or reference to a PowerShell file"
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable name for the step"
        },
        "name": {
          "type": "string",
          "description": "ID of the step",
          "pattern": "^[_A-Za-z0-9]*$"
        },
        "errorActionPreference": {
          "oneOf": [
            {
              "enum": [
                "stop",
                "continue",
                "silentlyContinue"
              ]
            },
            {
              "$ref": "#/definitions/macroRuntimeExpression"
            }
          ],
          "description": "Strategy for dealing with script errors"
        },
        "failOnStderr": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Fail the task if output is sent to Stderr?"
        },
        "ignoreLASTEXITCODE": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Check the final exit code of the script to determine whether the step succeeded?"
        },
        "workingDirectory": {
          "type": "string",
          "description": "Start the script with this working directory"
        },
        "condition": {
          "type": "string",
          "description": "Evaluate this condition expression to determine whether to run this script"
        },
        "continueOnError": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Continue running the parent job even on failure?"
        },
        "enabled": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Run this script when the job runs?"
        },
        "timeoutInMinutes": {
          "$ref": "#/definitions/integerMacroExpression",
          "description": "Time to wait for this script to complete before the server kills it"
        },
        "env": {
          "type": "object",
          "description": "Variables to map into the process's environment"
        }
      }
    },
    "checkout": {
      "type": "object",
      "required": [
        "checkout"
      ],
      "additionalProperties": false,
      "properties": {
        "checkout": {
          "enum": [
            "self",
            "none"
          ],
          "description": "Whether or not to check out the repository containing this pipeline definition"
        },
        "clean": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Start from a clean, freshly-fetched workdir?"
        },
        "fetchDepth": {
          "$ref": "#/definitions/integerMacroExpression",
          "description": "Depth of Git graph to fetch"
        },
        "lfs": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Fetch Git-LFS objects?"
        },
        "submodules": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Check out Git submodules?"
        },
        "persistCredentials": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Keep credentials available for later use?"
        },
        "condition": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Is this step enabled?"
        }
      }
    },
    "templateReference": {
      "type": "object",
      "required": [
        "template"
      ],
      "additionalProperties": false,
      "properties": {
        "template": {
          "type": "string",
          "description": "A URL to a step template"
        },
        "parameters": {
          "type": "object",
          "description": "Step-specific parameters"
        }
      }
    },
    "repositoryReference": {
      "type": "object",
      "required": [
        "repository"
      ],
      "additionalProperties": false,
      "properties": {
        "repository": {
          "type": "string",
          "description": "ID for the external repository",
          "pattern": "^[A-Za-z0-9_.]+$"
        },
        "type": {
          "enum": [
            "github",
            "tfsgit",
            "tfsversioncontrol"
          ],
          "description": "Type of external repository"
        },
        "endpoint": {
          "type": "string",
          "description": "ID of the service endpoint connecting to this repository"
        },
        "name": {
          "type": "string",
          "description": "Identity and repository name",
          "examples": [
            "contoso/foo"
          ]
        },
        "ref": {
          "type": "string",
          "description": "Refname to retrieve",
          "examples": [
            "refs/heads/master",
            "refs/tags/lkg"
          ]
        },
        "clean": {
          "description": "Scorch the repo before fetching?",
          "$ref": "#/definitions/booleanMacroRuntimeExpression"
        },
        "fetchDepth": {
          "description": "Depth of Git graph to fetch",
          "$ref": "#/definitions/integerMacroRuntimeExpression"
        },
        "lfs": {
          "description": "Fetch and checkout Git LFS objects?",
          "$ref": "#/definitions/booleanMacroRuntimeExpression"
        },
        "mappings": {
          "description": "Workspace mappings for TFVC",
          "type": "array",
          "items": {
            "$ref": "#/definitions/tfvcMappings"
          }
        },
        "submodules": {
          "description": "Fetch and checkout submodules?",
          "$ref": "#/definitions/booleanMacroRuntimeExpression"
        },
        "checkoutOptions": {
          "description": "[DEPRECATED] Move these up a level as peers of the `repository` keyword.",
          "type": "object"
        }
      }
    },
    "containerReference": {
      "type": "object",
      "required": [
        "container",
        "image"
      ],
      "additionalProperties": false,
      "properties": {
        "container": {
          "type": "string",
          "description": "ID for the container",
          "pattern": "^[A-Za-z0-9_]+$"
        },
        "image": {
          "type": "string",
          "description": "Container image tag",
          "examples": [
            "ubuntu:16.04",
            "windows:1803"
          ]
        },
        "endpoint": {
          "type": "string",
          "description": "ID of the service endpoint connecting to a private container registry"
        },
        "options": {
          "type": "string",
          "description": "Options to pass into container host"
        },
        "localImage": {
          "$ref": "#/definitions/booleanMacroRuntimeExpression",
          "description": "Build the image locally?"
        },
        "env": {
          "type": "object",
          "description": "Variables to map into the container's environment"
        },
        "type": {
          "type": "string",
          "description": "Container type"
        },
        "registry": {
          "type": "string",
          "description": "[DEPRECATED] Don't use"
        }
      }
    },
    "trigger": {
      "oneOf": [
        {
          "type": "string",
          "pattern": "^none$"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "type": "object",
          "properties": {
            "branches": {
              "type": "object",
              "properties": {
                "include": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "exclude": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "paths": {
              "type": "object",
              "properties": {
                "include": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "exclude": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "parameters": {
      "type": "object"
    },
    "tfvcMappings": {
      "type": "object",
      "properties": {
        "localPath": {
          "description": "On-disk path",
          "type": "string"
        },
        "serverPath": {
          "description": "TFVC server-side path",
          "type": "string"
        },
        "cloak": {
          "description": "Cloak this path?",
          "$ref": "#/definitions/booleanMacroRuntimeExpression"
        }
      }
    },
    "stepOrTemplateExpression": {
      "oneOf": [
        {
          "$ref": "#/definitions/step"
        },
        {
          "$ref": "#/definitions/stepInsertExpression"
        }
      ]
    },
    "step": {
      "oneOf": [
        {
          "$ref": "#/definitions/script"
        },
        {
          "$ref": "#/definitions/bash"
        },
        {
          "$ref": "#/definitions/powershell"
        },
        {
          "$ref": "#/definitions/checkout"
        },
        {
          "$ref": "#/definitions/templateReference"
        },
        {
          "$ref": "#/definitions/task"
        }
      ]
    },
    "booleanMacroExpression": {
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "$ref": "#/definitions/macroExpression"
        }
      ]
    },
    "booleanMacroRuntimeExpression": {
      "oneOf": [
        {
          "type": "boolean"
        },
        {
          "$ref": "#/definitions/runtimeExpression"
        },
        {
          "$ref": "#/definitions/macroExpression"
        }
      ]
    },
    "integerMacroExpression": {
      "oneOf": [
        {
          "type": "integer"
        },
        {
          "$ref": "#/definitions/macroExpression"
        }
      ]
    },
    "integerMacroRuntimeExpression": {
      "oneOf": [
        {
          "type": "integer"
        },
        {
          "$ref": "#/definitions/runtimeExpression"
        },
        {
          "$ref": "#/definitions/macroExpression"
        }
      ]
    },
    "macroRuntimeExpression": {
      "oneOf": [
        {
          "$ref": "#/definitions/runtimeExpression"
        },
        {
          "$ref": "#/definitions/macroExpression"
        }
      ]
    },
    "macroExpression": {
      "type": "string",
      "pattern": "^\\$\\(.*\\)$"
    },
    "runtimeExpression": {
      "type": "string",
      "pattern": "^\\$\\[.*\\]$"
    },
    "stepInsertExpression": {
      "type": "object",
      "description": "Conditionally insert one or more steps",
      "maxProperties": 1,
      "minProperties": 1,
      "patternProperties": {
        "^\\${{.*}}$": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/step"
          }
        }
      },
      "additionalProperties": false
    },
    "task": {
      "type": "object",
      "required": [
        "task"
      ],
      "anyOf": [
        {
          "properties": {
            "task": {
              "pattern": "^[nN]pm@0$",
              "description": "npm\n\nRun an npm command"
            },
            "inputs": {
              "properties": {
                "cwd": {
                  "description": "working folder",
                  "type": "string"
                },
                "command": {
                  "description": "npm command",
                  "type": "string"
                },
                "arguments": {
                  "description": "arguments",
                  "type": "string"
                }
              },
              "description": "npm inputs"
            }
          }
        },
        {
          "properties": {
            "task": {
              "pattern": "^[aA]ll[iI]nputs[tT]ask@0$",
              "description": "All Inputs Task\n\nAll inputs task"
            },
            "inputs": {
              "properties": {
                "a1": {
                  "description": "a1",
                  "type": "integer"
                },
                "a2": {
                  "description": "a2",
                  "type": "integer"
                },
                "a3": {
                  "description": "a3",
                  "type": "boolean"
                },
                "a4": {
                  "description": "a4",
                  "type": "boolean"
                },
                "a5": {
                  "description": "a5",
                  "type": "string"
                },
                "a6": {
                  "description": "a6",
                  "type": "string"
                },
                "a7": {
                  "description": "a7",
                  "type": "string"
                },
                "a8": {
                  "description": "a8",
                  "type": "string"
                },
                "a9": {
                  "description": "a9",
                  "type": "string"
                },
                "a10": {
                  "description": "a10",
                  "type": "string"
                },
                "a11": {
                  "description": "a11",
                  "type": "string"
                },
                "a12": {
                  "description": "a12",
                  "type": "string"
                },
                "a13": {
                  "description": "a13",
                  "type": "string"
                },
                "a14": {
                  "description": "a14",
                  "type": "string"
                },
                "a15": {
                  "description": "a15",
                  "type": "string"
                },
                "a16": {
                  "description": "a16",
                  "type": "string"
                },
                "a17": {
                  "description": "a17",
                  "type": "string"
                },
                "a18": {
                  "description": "a18",
                  "type": "string"
                },
                "a21": {
                  "description": "a21",
                  "type": "string"
                },
                "a22": {
                  "description": "a22",
                  "type": "string"
                },
                "a23": {
                  "description": "a23",
                  "enum": [
                    "Key 1",
                    "Key 2"
                  ]
                },
                "a24": {
                  "description": "a24",
                  "enum": [
                    "Key 1",
                    "Key 2"
                  ]
                },
                "a25": {
                  "description": "a25",
                  "enum": [
                    "Key 1",
                    "Key 2"
                  ]
                },
                "a26": {
                  "description": "a26",
                  "enum": [
                    "Key 1",
                    "Key 2"
                  ]
                },
                "a27": {
                  "description": "a27",
                  "type": "string"
                },
                "a28": {
                  "description": "a28",
                  "type": "string"
                }
              },
              "description": "All Inputs Task inputs"
            }
          }
        },
        {
          "properties": {
            "task": {
              "pattern": "^[tT]h[iI]s[tT]a[sS]k[hH]a[sS]m[iI]x[eE]d[cC]a[sS]i[nN]g[sS]@0$",
              "description": "name\n\nTest with multiple upper and lower case letters"
            },
            "inputs": {
              "properties": {
                "command": {
                  "description": "npm command",
                  "type": "string"
                }
              },
              "description": "name inputs"
            }
          }
        }
      ],
      "properties": {
        "task": {
          "enum": [
            "AllInputsTask@0",
            "Npm@0",
            "ThIsTaSkHaSmIxEdCaSiNgS@0"
          ],
          "description": "Task reference including major version"
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable name for the task"
        },
        "name": {
          "type": "string",
          "description": "ID of the task instance",
          "pattern": "^[_A-Za-z0-9]*$"
        },
        "condition": {
          "type": "string",
          "description": "Evaluate this condition expression to determine whether to run this task"
        },
        "continueOnError": {
          "type": "boolean",
          "description": "Continue running the parent job even on failure?"
        },
        "enabled": {
          "type": "boolean",
          "description": "Run this task when the job runs?"
        },
        "timeoutInMinutes": {
          "type": "integer",
          "description": "Time to wait for this task to complete before the server kills it"
        },
        "inputs": {
          "type": "object",
          "description": "Task-specific inputs"
        },
        "env": {
          "type": "object",
          "description": "Variables to map into the process's environment"
        }
      },
      "additionalProperties": false
    }
  }
}